/* The following code was generated by JFlex 1.4.3 on 4/19/11 9:03 PM */

package com.mailru.plugins.thtml.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/19/11 9:03 PM from the specification file
 * <tt>/home/mushroom/IdeaProjects/mailru-tmpl-lang/src/com/mailru/plugins/thtml/lang/lexer/thtml.flex</tt>
 */
public class TFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_FUNCTION_ARGUMENTS = 8;
  public static final int IN_STATEMENT = 4;
  public static final int IN_NESTED_FUNCTION_CALL = 10;
  public static final int YYINITIAL = 0;
  public static final int IN_SHORT_STATEMENT = 2;
  public static final int IN_SETVARS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\46\1\0\1\16"+
    "\2\0\1\44\1\0\1\10\1\11\1\0\1\13\1\15\1\14\1\6"+
    "\1\42\1\5\11\4\2\0\1\56\1\12\1\57\2\0\1\53\1\52"+
    "\1\50\1\40\1\41\1\34\2\7\1\33\1\7\1\54\1\43\1\7"+
    "\1\35\1\36\2\7\1\47\1\17\1\37\1\51\1\22\4\7\1\0"+
    "\1\55\2\0\1\26\1\0\1\23\2\7\1\32\1\20\1\27\2\7"+
    "\1\30\2\7\1\31\5\7\1\24\1\25\1\21\6\7\1\0\1\45"+
    "\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\3\1\1\2\2\3\3\2\1\4\1\5\1\6"+
    "\1\2\1\4\1\7\2\10\1\2\1\4\2\2\3\4"+
    "\3\2\1\11\3\4\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\2\10\1\2\1\4\2\2\1\1\1\0"+
    "\1\20\1\1\2\0\1\2\3\0\1\21\1\4\1\0"+
    "\1\22\1\4\2\0\1\10\1\0\1\20\1\23\2\4"+
    "\2\0\1\24\1\25\2\4\1\26\2\0\1\10\2\0"+
    "\1\27\1\30\1\31\1\1\1\0\2\1\1\0\1\4"+
    "\1\0\1\4\1\0\1\32\2\4\1\33\1\4\1\34"+
    "\1\0\2\4\2\0\1\35\1\1\1\0\1\36\1\0"+
    "\2\4\2\32\2\4\1\37\2\0\1\40\2\4\1\0"+
    "\1\1\2\0\2\4\1\41\1\42\1\4\2\0\1\4"+
    "\1\43\1\44\1\1\2\0\3\4\1\45\1\46\1\47"+
    "\1\4\1\1\1\0\1\50\5\4\1\0\1\4\1\1"+
    "\1\0\1\4\1\51\1\52\2\4\1\0\1\53\1\1"+
    "\1\0\1\4\1\54\1\55\1\56\1\1\1\0\1\50"+
    "\1\4\1\1\1\0\1\4\1\1\1\0\1\57\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u01b0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u01b0\0\u01b0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u01b0\0\u05a0\0\u05d0\0\u0600\0\u01b0\0\u01b0\0\u0630"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0210\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u01b0\0\u0930\0\u0960\0\u01b0"+
    "\0\u0990\0\u03c0\0\u09c0\0\u09f0\0\u0a20\0\u01b0\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u01b0\0\u01b0\0\u0b40\0\u0b70\0\u0ba0"+
    "\0\u06c0\0\u0690\0\u06c0\0\u0bd0\0\u0c00\0\u0ba0\0\u01b0\0\u01b0"+
    "\0\u0c30\0\u0c60\0\u01b0\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u03f0\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u01b0\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u01b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\u11a0\0\u01b0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u03f0\0\u1380\0\u13b0\0\u13e0"+
    "\0\u1410\0\u03f0\0\u01b0\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u01b0\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u01b0\0\u03f0\0\u1860\0\u1890\0\u18c0\0\u03f0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u03f0\0\u01b0\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u03f0"+
    "\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0"+
    "\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30"+
    "\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30"+
    "\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0"+
    "\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030"+
    "\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0"+
    "\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330"+
    "\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0"+
    "\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\u3630"+
    "\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u3780\0\u37b0"+
    "\0\u37e0\0\u3810\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900\0\u3930"+
    "\0\u3960\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a80\0\u3ab0"+
    "\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30"+
    "\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80\0\u3db0"+
    "\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00\0\u3f30"+
    "\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080\0\u40b0"+
    "\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200\0\u4230"+
    "\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380\0\u43b0"+
    "\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500\0\u4530"+
    "\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0"+
    "\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u4800\0\u4830"+
    "\0\u4860\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950\0\u4980\0\u49b0"+
    "\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0\0\u4b00\0\u4b30"+
    "\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\u4c50\0\u4c80\0\u4cb0"+
    "\0\u4ce0\0\u4d10\0\u4d40\0\u4d70\0\u4da0\0\u4dd0\0\u4e00\0\u4e30"+
    "\0\u4e60\0\u4e90\0\u4ec0\0\u4ef0\0\u4f20\0\u4f50\0\u4f80\0\u4fb0"+
    "\0\u4fe0\0\u5010\0\u5040\0\u5070\0\u50a0\0\u50d0\0\u5100\0\u5130"+
    "\0\u5160\0\u5190\0\u51c0\0\u51f0\0\u5220\0\u5250\0\u5280\0\u52b0"+
    "\0\u52e0\0\u5310\0\u5340\0\u5370\0\u53a0\0\u53d0\0\u5400\0\u5430"+
    "\0\u5460\0\u5490\0\u54c0\0\u54f0\0\u5520\0\u5550\0\u5580\0\u55b0"+
    "\0\u55e0\0\u5610\0\u5640\0\u5670\0\u56a0\0\u56d0\0\u5700\0\u5730"+
    "\0\u5760\0\u5790\0\u57c0\0\u57f0\0\u5820\0\u5850\0\u5880\0\u58b0"+
    "\0\u58e0\0\u5910\0\u5940\0\u5970\0\u59a0\0\u59d0\0\u5a00\0\u5a30"+
    "\0\u5a60\0\u5a90\0\u5ac0\0\u5af0\0\u5b20\0\u5b50\0\u5b80\0\u5bb0"+
    "\0\u5be0\0\u5c10\0\u5c40\0\u5c70\0\u5ca0\0\u5cd0\0\u5d00\0\u5d30"+
    "\0\u5d60\0\u5d90\0\u5dc0\0\u5df0\0\u5e20\0\u5e50\0\u5e80\0\u5eb0"+
    "\0\u5ee0\0\u5f10\0\u5f40\0\u5f70\0\u5fa0\0\u5fd0\0\u6000\0\u6030"+
    "\0\u6060\0\u6090\0\u60c0\0\u60f0\0\u6120\0\u6150\0\u6180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\16\7\1\10\37\7\1\11\1\7\1\12\1\13\1\14"+
    "\1\12\1\15\1\16\1\17\1\20\1\21\1\22\4\12"+
    "\1\23\1\24\22\20\1\12\1\20\3\12\6\20\4\12"+
    "\1\13\1\14\1\25\1\26\1\27\1\30\1\31\1\21"+
    "\1\22\2\12\1\32\1\12\1\33\14\31\1\34\1\35"+
    "\4\31\1\36\1\37\1\31\1\40\1\41\1\42\1\31"+
    "\1\43\1\31\1\44\2\31\6\12\1\25\1\26\1\27"+
    "\1\30\1\45\1\21\1\46\1\47\3\12\1\50\23\45"+
    "\1\12\1\45\3\12\6\45\6\12\1\25\1\26\1\27"+
    "\1\30\1\45\1\21\1\51\1\12\1\52\1\53\1\54"+
    "\1\50\23\45\1\12\1\45\3\12\6\45\6\12\1\25"+
    "\1\55\1\56\1\57\1\60\3\12\1\52\1\53\1\54"+
    "\1\61\23\60\1\12\1\60\3\12\6\60\1\62\2\12"+
    "\16\63\1\0\37\63\1\64\1\63\16\0\1\65\41\0"+
    "\46\7\1\66\11\7\62\0\1\14\61\0\2\67\1\70"+
    "\1\71\7\0\23\71\1\0\1\71\3\0\6\71\7\0"+
    "\2\72\1\70\1\71\7\0\23\71\1\0\1\71\3\0"+
    "\6\71\7\0\2\73\21\0\1\74\34\0\2\20\1\0"+
    "\1\20\1\75\6\0\7\20\1\76\13\20\1\77\1\20"+
    "\3\0\6\20\21\0\1\100\45\0\2\20\1\0\1\20"+
    "\1\75\6\0\1\20\1\101\5\20\1\76\13\20\1\77"+
    "\1\20\3\0\6\20\6\0\1\25\60\0\2\26\1\102"+
    "\1\71\7\0\23\71\1\0\1\71\3\0\6\71\7\0"+
    "\2\103\1\102\1\71\7\0\23\71\1\0\1\71\3\0"+
    "\6\71\7\0\2\104\56\0\2\31\1\0\1\31\1\75"+
    "\6\0\23\31\1\77\1\31\3\0\6\31\17\0\1\105"+
    "\61\0\1\106\45\0\2\31\1\0\1\31\1\75\6\0"+
    "\15\31\1\107\5\31\1\77\1\31\3\0\6\31\7\0"+
    "\2\31\1\0\1\31\1\75\6\0\17\31\1\110\3\31"+
    "\1\77\1\31\3\0\6\31\7\0\2\31\1\0\1\31"+
    "\1\75\6\0\23\31\1\77\1\111\3\0\6\31\36\0"+
    "\1\112\1\113\67\0\1\114\60\0\1\115\16\0\2\31"+
    "\1\0\1\31\1\75\6\0\17\31\1\116\3\31\1\77"+
    "\1\31\3\0\6\31\7\0\2\31\1\0\1\31\1\75"+
    "\6\0\23\31\1\77\1\31\3\0\1\117\5\31\7\0"+
    "\2\45\1\0\1\45\7\0\23\45\1\0\1\45\3\0"+
    "\6\45\21\0\1\120\45\0\2\55\1\121\55\0\2\122"+
    "\1\121\55\0\2\123\56\0\2\60\1\0\1\60\7\0"+
    "\23\60\1\124\1\60\3\0\6\60\1\125\20\0\1\126"+
    "\51\0\1\127\1\130\46\0\16\131\1\0\37\131\1\132"+
    "\1\131\46\63\1\0\11\63\16\0\1\133\55\0\1\134"+
    "\47\0\2\73\56\0\2\71\1\0\1\71\7\0\23\71"+
    "\1\0\1\71\3\0\6\71\7\0\2\72\1\70\55\0"+
    "\2\73\1\0\1\71\7\0\23\71\1\0\1\71\3\0"+
    "\6\71\33\0\1\135\33\0\1\136\1\20\1\0\1\20"+
    "\1\75\6\0\7\20\1\76\13\20\1\77\1\20\3\0"+
    "\6\20\12\0\1\137\7\0\23\137\1\0\1\137\3\0"+
    "\6\137\7\0\2\20\1\0\1\20\1\75\6\0\2\20"+
    "\1\140\4\20\1\76\13\20\1\77\1\20\3\0\6\20"+
    "\7\0\2\103\1\102\55\0\2\104\1\0\1\71\7\0"+
    "\23\71\1\0\1\71\3\0\6\71\17\0\1\141\42\0"+
    "\1\142\4\0\2\31\1\0\1\31\1\75\6\0\16\31"+
    "\1\143\2\31\1\144\1\31\1\77\1\31\3\0\6\31"+
    "\7\0\2\31\1\0\1\31\1\75\6\0\23\31\1\77"+
    "\1\31\3\0\1\145\5\31\7\0\2\31\1\0\1\31"+
    "\1\75\6\0\1\146\22\31\1\77\1\31\3\0\6\31"+
    "\37\0\1\147\61\0\1\150\25\0\2\31\1\0\1\31"+
    "\1\75\6\0\16\31\1\151\4\31\1\77\1\31\3\0"+
    "\6\31\7\0\2\31\1\0\1\31\1\75\6\0\22\31"+
    "\1\152\1\77\1\31\3\0\6\31\12\0\1\153\7\0"+
    "\23\153\1\0\1\153\3\0\6\153\12\0\1\154\7\0"+
    "\23\154\1\0\1\154\3\0\6\154\13\0\1\155\47\0"+
    "\16\156\1\0\37\156\1\157\1\156\46\131\1\0\11\131"+
    "\14\0\1\160\63\0\1\161\43\0\2\136\1\0\1\20"+
    "\1\75\6\0\7\20\1\162\13\20\1\77\1\20\3\0"+
    "\6\20\7\0\2\137\1\0\1\137\1\75\6\0\23\137"+
    "\1\0\1\137\3\0\6\137\7\0\2\20\1\0\1\20"+
    "\1\75\6\0\3\20\1\163\3\20\1\76\13\20\1\77"+
    "\1\20\3\0\6\20\62\0\1\142\1\0\1\164\1\165"+
    "\61\0\2\31\1\0\1\31\1\75\6\0\17\31\1\166"+
    "\3\31\1\77\1\31\3\0\6\31\7\0\2\31\1\0"+
    "\1\31\1\75\6\0\22\31\1\167\1\77\1\31\3\0"+
    "\6\31\7\0\2\31\1\0\1\31\1\75\6\0\22\31"+
    "\1\170\1\77\1\31\3\0\6\31\40\0\1\171\2\0"+
    "\1\172\66\0\1\173\14\0\2\31\1\0\1\31\1\75"+
    "\6\0\20\31\1\174\2\31\1\77\1\31\3\0\6\31"+
    "\7\0\2\31\1\0\1\31\1\75\6\0\23\31\1\77"+
    "\1\31\3\0\4\31\1\175\1\31\7\0\2\153\1\0"+
    "\1\153\6\0\1\176\23\153\1\0\1\153\3\0\6\153"+
    "\7\0\2\154\1\0\1\154\7\0\23\154\1\0\1\154"+
    "\3\0\6\154\1\125\2\0\16\177\1\0\37\177\1\200"+
    "\1\177\46\156\1\0\11\156\14\0\1\133\74\0\1\201"+
    "\32\0\1\136\1\20\1\0\1\20\1\75\6\0\7\20"+
    "\1\76\1\202\12\20\1\77\1\20\3\0\6\20\7\0"+
    "\2\20\1\0\1\20\1\75\6\0\4\20\1\203\2\20"+
    "\1\76\13\20\1\77\1\20\3\0\6\20\5\0\1\165"+
    "\61\0\2\31\1\0\1\31\1\75\6\0\20\31\1\204"+
    "\2\31\1\77\1\31\3\0\6\31\7\0\2\31\1\0"+
    "\1\31\1\75\6\0\15\31\1\205\5\31\1\77\1\31"+
    "\3\0\6\31\7\0\2\31\1\0\1\31\1\75\6\0"+
    "\14\31\1\206\6\31\1\77\1\31\3\0\6\31\41\0"+
    "\1\207\62\0\1\210\22\0\2\31\1\0\1\31\1\75"+
    "\6\0\14\31\1\211\6\31\1\77\1\31\3\0\6\31"+
    "\7\0\2\31\1\0\1\31\1\75\6\0\23\31\1\77"+
    "\1\31\3\0\5\31\1\212\21\0\1\213\41\0\16\214"+
    "\1\0\37\214\1\215\1\214\46\177\1\0\11\177\32\0"+
    "\1\216\31\0\2\20\1\0\1\20\1\75\6\0\7\20"+
    "\1\76\1\20\1\217\11\20\1\77\1\20\3\0\6\20"+
    "\7\0\2\20\1\0\1\20\1\75\6\0\5\20\1\220"+
    "\1\20\1\76\13\20\1\77\1\20\3\0\6\20\7\0"+
    "\2\31\1\0\1\31\1\75\6\0\21\31\1\221\1\31"+
    "\1\77\1\31\3\0\6\31\7\0\2\31\1\0\1\31"+
    "\1\75\6\0\15\31\1\222\5\31\1\77\1\31\3\0"+
    "\6\31\42\0\1\223\54\0\1\224\27\0\2\31\1\0"+
    "\1\31\1\75\6\0\16\31\1\225\4\31\1\77\1\31"+
    "\3\0\6\31\3\0\16\226\1\0\37\226\1\227\1\226"+
    "\46\214\1\0\11\214\4\0\1\230\57\0\2\20\1\0"+
    "\1\20\1\75\6\0\1\20\1\231\5\20\1\76\13\20"+
    "\1\77\1\20\3\0\6\20\7\0\2\20\1\0\1\20"+
    "\1\75\6\0\6\20\1\232\1\76\13\20\1\77\1\20"+
    "\3\0\6\20\7\0\2\31\1\0\1\31\1\75\6\0"+
    "\22\31\1\233\1\77\1\31\3\0\6\31\7\0\2\31"+
    "\1\0\1\31\1\75\6\0\16\31\1\234\2\31\1\235"+
    "\1\31\1\77\1\31\3\0\6\31\43\0\1\236\23\0"+
    "\2\31\1\0\1\31\1\75\6\0\23\31\1\77\1\31"+
    "\3\0\2\31\1\237\3\31\3\0\16\240\1\0\37\240"+
    "\1\241\1\240\46\226\1\0\11\226\4\0\2\230\56\0"+
    "\2\20\1\0\1\20\1\75\6\0\7\20\1\76\2\20"+
    "\1\242\10\20\1\77\1\20\3\0\6\20\7\0\2\20"+
    "\1\0\1\20\1\243\6\0\7\20\1\76\13\20\1\77"+
    "\1\20\3\0\6\20\7\0\2\31\1\0\1\31\1\75"+
    "\6\0\15\31\1\244\5\31\1\77\1\31\3\0\6\31"+
    "\7\0\2\31\1\0\1\31\1\75\6\0\17\31\1\245"+
    "\3\31\1\77\1\31\3\0\6\31\7\0\2\31\1\0"+
    "\1\31\1\75\6\0\22\31\1\246\1\77\1\31\3\0"+
    "\6\31\44\0\1\247\22\0\2\31\1\0\1\31\1\75"+
    "\6\0\22\31\1\250\1\77\1\31\3\0\6\31\3\0"+
    "\16\251\1\0\37\251\1\252\1\251\46\240\1\0\11\240"+
    "\4\0\2\20\1\0\1\20\1\75\6\0\7\20\1\76"+
    "\3\20\1\253\7\20\1\77\1\20\3\0\6\20\7\0"+
    "\2\31\1\0\1\31\1\75\6\0\20\31\1\254\2\31"+
    "\1\77\1\31\3\0\6\31\7\0\2\31\1\0\1\31"+
    "\1\75\6\0\15\31\1\255\5\31\1\77\1\31\3\0"+
    "\6\31\37\0\1\256\23\0\16\257\1\0\37\257\1\260"+
    "\1\257\46\251\1\0\11\251\4\0\1\261\1\20\1\0"+
    "\1\20\1\75\6\0\7\20\1\76\13\20\1\77\1\20"+
    "\3\0\6\20\7\0\2\31\1\0\1\31\1\75\6\0"+
    "\21\31\1\262\1\31\1\77\1\31\3\0\6\31\3\0"+
    "\16\263\1\0\37\263\1\264\1\263\46\257\1\0\11\257"+
    "\4\0\2\261\1\0\1\20\1\75\6\0\7\20\1\76"+
    "\13\20\1\77\1\20\3\0\6\20\7\0\2\31\1\0"+
    "\1\31\1\75\6\0\22\31\1\265\1\77\1\31\3\0"+
    "\6\31\3\0\16\266\1\0\37\266\1\267\1\266\46\263"+
    "\1\0\11\263\4\0\2\31\1\0\1\31\1\75\6\0"+
    "\15\31\1\270\5\31\1\77\1\31\3\0\6\31\3\0"+
    "\16\271\1\0\37\271\1\272\1\271\46\266\1\0\11\266"+
    "\16\273\1\0\37\273\1\274\1\273\46\271\1\0\11\271"+
    "\16\275\1\0\37\275\1\276\1\275\46\273\1\0\11\273"+
    "\16\277\1\0\37\277\1\300\1\277\46\275\1\0\11\275"+
    "\16\301\1\0\37\301\1\302\1\301\46\277\1\0\11\277"+
    "\16\303\1\0\37\303\1\304\1\303\46\301\1\0\11\301"+
    "\16\305\1\0\37\305\1\306\1\305\46\303\1\0\11\303"+
    "\16\307\1\0\37\307\1\310\1\307\46\305\1\0\11\305"+
    "\16\311\1\0\37\311\1\312\1\311\46\307\1\0\11\307"+
    "\16\313\1\0\37\313\1\314\1\313\46\311\1\0\11\311"+
    "\16\315\1\0\37\315\1\316\1\315\46\313\1\0\11\313"+
    "\16\317\1\0\37\317\1\320\1\317\46\315\1\0\11\315"+
    "\16\321\1\0\37\321\1\322\1\321\46\317\1\0\11\317"+
    "\16\323\1\0\37\323\1\324\1\323\46\321\1\0\11\321"+
    "\16\325\1\0\37\325\1\326\1\325\46\323\1\0\11\323"+
    "\16\327\1\0\37\327\1\330\1\327\46\325\1\0\11\325"+
    "\16\331\1\0\37\331\1\332\1\331\46\327\1\0\11\327"+
    "\16\333\1\0\37\333\1\334\1\333\46\331\1\0\11\331"+
    "\16\335\1\0\37\335\1\336\1\335\46\333\1\0\11\333"+
    "\16\337\1\0\37\337\1\340\1\337\46\335\1\0\11\335"+
    "\16\341\1\0\37\341\1\342\1\341\46\337\1\0\11\337"+
    "\16\343\1\0\37\343\1\344\1\343\46\341\1\0\11\341"+
    "\16\345\1\0\37\345\1\346\1\345\46\343\1\0\11\343"+
    "\16\347\1\0\37\347\1\350\1\347\46\345\1\0\11\345"+
    "\16\351\1\0\37\351\1\352\1\351\46\347\1\0\11\347"+
    "\16\353\1\0\37\353\1\354\1\353\46\351\1\0\11\351"+
    "\16\355\1\0\37\355\1\356\1\355\46\353\1\0\11\353"+
    "\16\357\1\0\37\357\1\360\1\357\46\355\1\0\11\355"+
    "\16\361\1\0\37\361\1\362\1\361\46\357\1\0\11\357"+
    "\16\363\1\0\37\363\1\364\1\363\46\361\1\0\11\361"+
    "\16\365\1\0\37\365\1\366\1\365\46\363\1\0\11\363"+
    "\16\367\1\0\37\367\1\370\1\367\46\365\1\0\11\365"+
    "\16\371\1\0\37\371\1\372\1\371\46\367\1\0\11\367"+
    "\16\373\1\0\37\373\1\374\1\373\46\371\1\0\11\371"+
    "\16\375\1\0\37\375\1\376\1\375\46\373\1\0\11\373"+
    "\16\377\1\0\37\377\1\u0100\1\377\46\375\1\0\11\375"+
    "\16\u0101\1\0\37\u0101\1\u0102\1\u0101\46\377\1\0\11\377"+
    "\16\u0103\1\0\37\u0103\1\u0104\1\u0103\46\u0101\1\0\11\u0101"+
    "\16\u0105\1\0\37\u0105\1\u0106\1\u0105\46\u0103\1\0\11\u0103"+
    "\16\u0107\1\0\37\u0107\1\u0108\1\u0107\46\u0105\1\0\11\u0105"+
    "\16\u0109\1\0\37\u0109\1\u010a\1\u0109\46\u0107\1\0\11\u0107"+
    "\16\u010b\1\0\37\u010b\1\u010c\1\u010b\46\u0109\1\0\11\u0109"+
    "\16\u010d\1\0\37\u010d\1\u010e\1\u010d\46\u010b\1\0\11\u010b"+
    "\16\u010f\1\0\37\u010f\1\u0110\1\u010f\46\u010d\1\0\11\u010d"+
    "\16\u0111\1\0\37\u0111\1\u0112\1\u0111\46\u010f\1\0\11\u010f"+
    "\16\u0113\1\0\37\u0113\1\u0114\1\u0113\46\u0111\1\0\11\u0111"+
    "\16\u0115\1\0\37\u0115\1\u0116\1\u0115\46\u0113\1\0\11\u0113"+
    "\16\u0117\1\0\37\u0117\1\u0118\1\u0117\46\u0115\1\0\11\u0115"+
    "\16\u0119\1\0\37\u0119\1\u011a\1\u0119\46\u0117\1\0\11\u0117"+
    "\16\u011b\1\0\37\u011b\1\u011c\1\u011b\46\u0119\1\0\11\u0119"+
    "\16\u011d\1\0\37\u011d\1\u011e\1\u011d\46\u011b\1\0\11\u011b"+
    "\16\u011f\1\0\37\u011f\1\u0120\1\u011f\46\u011d\1\0\11\u011d"+
    "\16\u0121\1\0\37\u0121\1\u0122\1\u0121\46\u011f\1\0\11\u011f"+
    "\16\u0123\1\0\37\u0123\1\u0124\1\u0123\46\u0121\1\0\11\u0121"+
    "\16\u0125\1\0\37\u0125\1\u0126\1\u0125\46\u0123\1\0\11\u0123"+
    "\16\u0127\1\0\37\u0127\1\u0128\1\u0127\46\u0125\1\0\11\u0125"+
    "\16\u0129\1\0\37\u0129\1\u012a\1\u0129\46\u0127\1\0\11\u0127"+
    "\16\u012b\1\0\37\u012b\1\u012c\1\u012b\46\u0129\1\0\11\u0129"+
    "\16\u012d\1\0\37\u012d\1\u012e\1\u012d\46\u012b\1\0\11\u012b"+
    "\16\u012f\1\0\37\u012f\1\u0130\1\u012f\46\u012d\1\0\11\u012d"+
    "\16\u0131\1\0\37\u0131\1\u0132\1\u0131\46\u012f\1\0\11\u012f"+
    "\16\u0133\1\0\37\u0133\1\u0134\1\u0133\46\u0131\1\0\11\u0131"+
    "\16\u0135\1\0\37\u0135\1\u0136\1\u0135\46\u0133\1\0\11\u0133"+
    "\16\u0137\1\0\37\u0137\1\u0138\1\u0137\46\u0135\1\0\11\u0135"+
    "\16\u0139\1\0\37\u0139\1\u013a\1\u0139\46\u0137\1\0\11\u0137"+
    "\16\u013b\1\0\37\u013b\1\u013c\1\u013b\46\u0139\1\0\11\u0139"+
    "\16\u013d\1\0\37\u013d\1\u013e\1\u013d\46\u013b\1\0\11\u013b"+
    "\16\u013f\1\0\37\u013f\1\u0140\1\u013f\46\u013d\1\0\11\u013d"+
    "\16\u0141\1\0\37\u0141\1\u0142\1\u0141\46\u013f\1\0\11\u013f"+
    "\16\u0143\1\0\37\u0143\1\u0144\1\u0143\46\u0141\1\0\11\u0141"+
    "\16\u0145\1\0\37\u0145\1\u0146\1\u0145\46\u0143\1\0\11\u0143"+
    "\16\u0147\1\0\37\u0147\1\u0148\1\u0147\46\u0145\1\0\11\u0145"+
    "\16\u0149\1\0\37\u0149\1\u014a\1\u0149\46\u0147\1\0\11\u0147"+
    "\16\u014b\1\0\37\u014b\1\u014c\1\u014b\46\u0149\1\0\11\u0149"+
    "\16\u014d\1\0\37\u014d\1\u014e\1\u014d\46\u014b\1\0\11\u014b"+
    "\16\u014f\1\0\37\u014f\1\u0150\1\u014f\46\u014d\1\0\11\u014d"+
    "\16\u0151\1\0\37\u0151\1\u0152\1\u0151\46\u014f\1\0\11\u014f"+
    "\16\u0153\1\0\37\u0153\1\u0154\1\u0153\46\u0151\1\0\11\u0151"+
    "\16\u0155\1\0\37\u0155\1\u0156\1\u0155\46\u0153\1\0\11\u0153"+
    "\16\u0157\1\0\37\u0157\1\u0158\1\u0157\46\u0155\1\0\11\u0155"+
    "\16\u0159\1\0\37\u0159\1\u015a\1\u0159\46\u0157\1\0\11\u0157"+
    "\16\u015b\1\0\37\u015b\1\u015c\1\u015b\46\u0159\1\0\11\u0159"+
    "\16\u015d\1\0\37\u015d\1\u015e\1\u015d\46\u015b\1\0\11\u015b"+
    "\16\u015f\1\0\37\u015f\1\u0160\1\u015f\46\u015d\1\0\11\u015d"+
    "\16\u0161\1\0\37\u0161\1\u0162\1\u0161\46\u015f\1\0\11\u015f"+
    "\16\u0163\1\0\37\u0163\1\u0164\1\u0163\46\u0161\1\0\11\u0161"+
    "\16\u0165\1\0\37\u0165\1\u0166\1\u0165\46\u0163\1\0\11\u0163"+
    "\16\u0167\1\0\37\u0167\1\u0168\1\u0167\46\u0165\1\0\11\u0165"+
    "\16\u0169\1\0\37\u0169\1\u016a\1\u0169\46\u0167\1\0\11\u0167"+
    "\16\u016b\1\0\37\u016b\1\u016c\1\u016b\46\u0169\1\0\11\u0169"+
    "\16\u016d\1\0\37\u016d\1\u016e\1\u016d\46\u016b\1\0\11\u016b"+
    "\16\u016f\1\0\37\u016f\1\u0170\1\u016f\46\u016d\1\0\11\u016d"+
    "\16\u0171\1\0\37\u0171\1\u0172\1\u0171\46\u016f\1\0\11\u016f"+
    "\16\u0173\1\0\37\u0173\1\u0174\1\u0173\46\u0171\1\0\11\u0171"+
    "\16\u0175\1\0\37\u0175\1\u0176\1\u0175\46\u0173\1\0\11\u0173"+
    "\16\u0177\1\0\37\u0177\1\u0178\1\u0177\46\u0175\1\0\11\u0175"+
    "\16\u0179\1\0\37\u0179\1\u017a\1\u0179\46\u0177\1\0\11\u0177"+
    "\16\u017b\1\0\37\u017b\1\u017c\1\u017b\46\u0179\1\0\11\u0179"+
    "\16\u017d\1\0\37\u017d\1\u017e\1\u017d\46\u017b\1\0\11\u017b"+
    "\16\u017f\1\0\37\u017f\1\u0180\1\u017f\46\u017d\1\0\11\u017d"+
    "\16\u0181\1\0\37\u0181\1\u0182\1\u0181\46\u017f\1\0\11\u017f"+
    "\16\u0183\1\0\37\u0183\1\u0184\1\u0183\46\u0181\1\0\11\u0181"+
    "\16\u0185\1\0\37\u0185\1\u0186\1\u0185\46\u0183\1\0\11\u0183"+
    "\16\u0187\1\0\37\u0187\1\u0188\1\u0187\46\u0185\1\0\11\u0185"+
    "\16\u0189\1\0\37\u0189\1\u018a\1\u0189\46\u0187\1\0\11\u0187"+
    "\16\u018b\1\0\37\u018b\1\u018c\1\u018b\46\u0189\1\0\11\u0189"+
    "\16\u018d\1\0\37\u018d\1\u018e\1\u018d\46\u018b\1\0\11\u018b"+
    "\16\u018f\1\0\37\u018f\1\u0190\1\u018f\46\u018d\1\0\11\u018d"+
    "\16\u0191\1\0\37\u0191\1\u0192\1\u0191\46\u018f\1\0\11\u018f"+
    "\16\u0193\1\0\37\u0193\1\u0194\1\u0193\46\u0191\1\0\11\u0191"+
    "\16\u0195\1\0\37\u0195\1\u0196\1\u0195\46\u0193\1\0\11\u0193"+
    "\16\u0197\1\0\37\u0197\1\u0198\1\u0197\46\u0195\1\0\11\u0195"+
    "\16\u0199\1\0\37\u0199\1\u019a\1\u0199\46\u0197\1\0\11\u0197"+
    "\16\u019b\1\0\37\u019b\1\u019c\1\u019b\46\u0199\1\0\11\u0199"+
    "\16\u019d\1\0\37\u019d\1\u019e\1\u019d\46\u019b\1\0\11\u019b"+
    "\16\u019f\1\0\37\u019f\1\u01a0\1\u019f\46\u019d\1\0\11\u019d"+
    "\16\u01a1\1\0\37\u01a1\1\u01a2\1\u01a1\46\u019f\1\0\11\u019f"+
    "\16\u01a3\1\0\37\u01a3\1\u01a4\1\u01a3\46\u01a1\1\0\11\u01a1"+
    "\16\u01a5\1\0\37\u01a5\1\u01a6\1\u01a5\46\u01a3\1\0\11\u01a3"+
    "\16\u01a7\1\0\37\u01a7\1\u01a8\1\u01a7\46\u01a5\1\0\11\u01a5"+
    "\16\u01a9\1\0\37\u01a9\1\u01aa\1\u01a9\46\u01a7\1\0\11\u01a7"+
    "\16\u01ab\1\0\37\u01ab\1\u01ac\1\u01ab\46\u01a9\1\0\11\u01a9"+
    "\16\u01ad\1\0\37\u01ad\1\u01ae\1\u01ad\46\u01ab\1\0\11\u01ab"+
    "\16\u01af\1\0\37\u01af\1\u01b0\1\u01af\46\u01ad\1\0\11\u01ad"+
    "\16\u01b1\1\0\37\u01b1\1\u01b2\1\u01b1\46\u01af\1\0\11\u01af"+
    "\16\u01b3\1\0\37\u01b3\1\u01b4\1\u01b3\46\u01b1\1\0\11\u01b1"+
    "\16\u01b5\1\0\37\u01b5\1\u01b6\1\u01b5\46\u01b3\1\0\11\u01b3"+
    "\16\u01b7\1\0\37\u01b7\1\u01b8\1\u01b7\46\u01b5\1\0\11\u01b5"+
    "\16\u01b9\1\0\37\u01b9\1\u01ba\1\u01b9\46\u01b7\1\0\11\u01b7"+
    "\16\u01bb\1\0\37\u01bb\1\u01bc\1\u01bb\46\u01b9\1\0\11\u01b9"+
    "\16\u01bd\1\0\37\u01bd\1\u01be\1\u01bd\46\u01bb\1\0\11\u01bb"+
    "\16\u01bf\1\0\37\u01bf\1\u01c0\1\u01bf\46\u01bd\1\0\11\u01bd"+
    "\16\u01c1\1\0\37\u01c1\1\u01c2\1\u01c1\46\u01bf\1\0\11\u01bf"+
    "\16\u01c3\1\0\37\u01c3\1\u01c4\1\u01c3\46\u01c1\1\0\11\u01c1"+
    "\16\u01c5\1\0\37\u01c5\1\u01c6\1\u01c5\46\u01c3\1\0\11\u01c3"+
    "\16\u01c7\1\0\37\u01c7\1\u01c8\1\u01c7\46\u01c5\1\0\11\u01c5"+
    "\16\u01c9\1\0\37\u01c9\1\u01ca\1\u01c9\46\u01c7\1\0\11\u01c7"+
    "\16\u01cb\1\0\37\u01cb\1\u01cc\1\u01cb\46\u01c9\1\0\11\u01c9"+
    "\16\u01cd\1\0\37\u01cd\1\u01ce\1\u01cd\46\u01cb\1\0\11\u01cb"+
    "\16\u01cf\1\0\37\u01cf\1\u01d0\1\u01cf\46\u01cd\1\0\11\u01cd"+
    "\16\u01d1\1\0\37\u01d1\1\u01d2\1\u01d1\46\u01cf\1\0\11\u01cf"+
    "\16\u01d3\1\0\37\u01d3\1\u01d4\1\u01d3\46\u01d1\1\0\11\u01d1"+
    "\16\u01d5\1\0\37\u01d5\1\u01d6\1\u01d5\46\u01d3\1\0\11\u01d3"+
    "\16\u01d7\1\0\37\u01d7\1\u01d8\1\u01d7\46\u01d5\1\0\11\u01d5"+
    "\16\u01d9\1\0\37\u01d9\1\u01da\1\u01d9\46\u01d7\1\0\11\u01d7"+
    "\16\u01db\1\0\37\u01db\1\u01dc\1\u01db\46\u01d9\1\0\11\u01d9"+
    "\16\u01dd\1\0\37\u01dd\1\u01de\1\u01dd\46\u01db\1\0\11\u01db"+
    "\16\u01df\1\0\37\u01df\1\u01e0\1\u01df\46\u01dd\1\0\11\u01dd"+
    "\16\u01e1\1\0\37\u01e1\1\u01e2\1\u01e1\46\u01df\1\0\11\u01df"+
    "\16\u01e3\1\0\37\u01e3\1\u01e4\1\u01e3\46\u01e1\1\0\11\u01e1"+
    "\16\u01e5\1\0\37\u01e5\1\u01e6\1\u01e5\46\u01e3\1\0\11\u01e3"+
    "\16\u01e7\1\0\37\u01e7\1\u01e8\1\u01e7\46\u01e5\1\0\11\u01e5"+
    "\16\u01e9\1\0\37\u01e9\1\u01ea\1\u01e9\46\u01e7\1\0\11\u01e7"+
    "\16\u01eb\1\0\37\u01eb\1\u01ec\1\u01eb\46\u01e9\1\0\11\u01e9"+
    "\16\u01ed\1\0\37\u01ed\1\u01ee\1\u01ed\46\u01eb\1\0\11\u01eb"+
    "\16\u01ef\1\0\37\u01ef\1\u01f0\1\u01ef\46\u01ed\1\0\11\u01ed"+
    "\16\u01f1\1\0\37\u01f1\1\u01f2\1\u01f1\46\u01ef\1\0\11\u01ef"+
    "\16\u01f3\1\0\37\u01f3\1\u01f4\1\u01f3\46\u01f1\1\0\11\u01f1"+
    "\16\u01f5\1\0\37\u01f5\1\u01f6\1\u01f5\46\u01f3\1\0\11\u01f3"+
    "\16\u01f7\1\0\37\u01f7\1\u01f8\1\u01f7\46\u01f5\1\0\11\u01f5"+
    "\16\u01f9\1\0\37\u01f9\1\u01fa\1\u01f9\46\u01f7\1\0\11\u01f7"+
    "\16\u01fb\1\0\37\u01fb\1\u01fc\1\u01fb\46\u01f9\1\0\11\u01f9"+
    "\16\u01fd\1\0\37\u01fd\1\u01fe\1\u01fd\46\u01fb\1\0\11\u01fb"+
    "\16\u01ff\1\0\37\u01ff\1\u0200\1\u01ff\46\u01fd\1\0\11\u01fd"+
    "\16\u0201\1\0\37\u0201\1\u0202\1\u0201\46\u01ff\1\0\11\u01ff"+
    "\16\u0203\1\0\37\u0203\1\u0204\1\u0203\46\u0201\1\0\11\u0201"+
    "\16\u0205\1\0\37\u0205\1\u0206\1\u0205\46\u0203\1\0\11\u0203"+
    "\16\u0207\1\0\37\u0207\1\u0208\1\u0207\46\u0205\1\0\11\u0205"+
    "\16\u0209\1\0\37\u0209\1\u020a\1\u0209\46\u0207\1\0\11\u0207"+
    "\16\u020b\1\0\37\u020b\1\u020c\1\u020b\46\u0209\1\0\11\u0209"+
    "\16\u020d\1\0\37\u020d\1\u020e\1\u020d\46\u020b\1\0\11\u020b"+
    "\16\u020f\1\0\37\u020f\1\u0210\1\u020f\46\u020d\1\0\11\u020d"+
    "\16\u0211\1\0\37\u0211\1\u0212\1\u0211\46\u020f\1\0\11\u020f"+
    "\16\u0213\1\0\37\u0213\1\u0214\1\u0213\46\u0211\1\0\11\u0211"+
    "\16\u0215\1\0\37\u0215\1\u0216\1\u0215\46\u0213\1\0\11\u0213"+
    "\16\u0217\1\0\37\u0217\1\u0218\1\u0217\46\u0215\1\0\11\u0215"+
    "\16\u0219\1\0\37\u0219\1\u021a\1\u0219\46\u0217\1\0\11\u0217"+
    "\16\u021b\1\0\37\u021b\1\u021c\1\u021b\46\u0219\1\0\11\u0219"+
    "\16\u021d\1\0\37\u021d\1\u021e\1\u021d\46\u021b\1\0\11\u021b"+
    "\16\u021f\1\0\37\u021f\1\u0220\1\u021f\46\u021d\1\0\11\u021d"+
    "\16\u0221\1\0\37\u0221\1\u0222\1\u0221\46\u021f\1\0\11\u021f"+
    "\16\u0223\1\0\37\u0223\1\u0224\1\u0223\46\u0221\1\0\11\u0221"+
    "\16\u0225\1\0\37\u0225\1\u0226\1\u0225\46\u0223\1\0\11\u0223"+
    "\16\u0227\1\0\37\u0227\1\u0228\1\u0227\46\u0225\1\0\11\u0225"+
    "\16\u0229\1\0\37\u0229\1\u022a\1\u0229\46\u0227\1\0\11\u0227"+
    "\16\u022b\1\0\37\u022b\1\u022c\1\u022b\46\u0229\1\0\11\u0229"+
    "\16\u022d\1\0\37\u022d\1\u022e\1\u022d\46\u022b\1\0\11\u022b"+
    "\16\133\1\0\37\133\1\u022f\1\133\46\u022d\1\0\11\u022d"+
    "\46\133\1\0\11\133";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\1\1\11\1\1\1\11\4\1\2\11\17\1"+
    "\1\11\3\1\2\11\1\1\4\11\7\1\1\0\2\1"+
    "\2\0\1\1\3\0\1\11\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\0\1\11\3\1\2\0\2\11\3\1"+
    "\2\0\1\1\2\0\1\1\2\11\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0"+
    "\2\1\2\0\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\3\1\2\0\1\11\2\1\1\0\1\1\2\0"+
    "\5\1\2\0\2\1\1\11\1\1\2\0\5\1\1\11"+
    "\2\1\1\0\6\1\1\0\2\1\1\0\1\1\1\11"+
    "\3\1\1\0\2\1\1\0\3\1\1\11\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private int previousState = YYINITIAL;

    private void saveState(int state) {
        previousState = state;
    }



  public TFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { yypushback(1); saveState(yystate()); yybegin(IN_FUNCTION_ARGUMENTS); return TTokenTypes.FUNC_NAME;
          }
        case 48: break;
        case 47: 
          { return TTokenTypes.C_ELSEIFNOTDEF;
          }
        case 49: break;
        case 42: 
          { return TTokenTypes.C_IFNOTDEF;
          }
        case 50: break;
        case 10: 
          { yybegin(IN_SHORT_STATEMENT); return TTokenTypes.RPAREN;
          }
        case 51: break;
        case 14: 
          { return TTokenTypes.OP_MINUS;
          }
        case 52: break;
        case 38: 
          { return TTokenTypes.C_ENDIFNOT;
          }
        case 53: break;
        case 13: 
          { return TTokenTypes.OP_PLUS;
          }
        case 54: break;
        case 41: 
          { yybegin(IN_SETVARS); yypushback(1); return TTokenTypes.SETVARS;
          }
        case 55: break;
        case 46: 
          { return TTokenTypes.C_ENDIFNOTDEF;
          }
        case 56: break;
        case 45: 
          { return TTokenTypes.C_ELSEIFDEF;
          }
        case 57: break;
        case 19: 
          { return TTokenTypes.C_IF;
          }
        case 58: break;
        case 2: 
          { return TTokenTypes.UNKNOWN_SYMBOL;
          }
        case 59: break;
        case 26: 
          { yybegin(YYINITIAL);
    return TTokenTypes.STATEMENT_CLOSING_TAG;
          }
        case 60: break;
        case 43: 
          { return TTokenTypes.L_CONTINUE;
          }
        case 61: break;
        case 6: 
          { return TTokenTypes.RPAREN;
          }
        case 62: break;
        case 5: 
          { return TTokenTypes.LPAREN;
          }
        case 63: break;
        case 20: 
          { return TTokenTypes.OP_AND;
          }
        case 64: break;
        case 9: 
          { return TTokenTypes.OP_NOT;
          }
        case 65: break;
        case 34: 
          { return TTokenTypes.C_IFDEF;
          }
        case 66: break;
        case 3: 
          { yybegin(YYINITIAL); return TTokenTypes.HTML;
          }
        case 67: break;
        case 35: 
          { return TTokenTypes.L_BREAK;
          }
        case 68: break;
        case 12: 
          { yybegin(previousState); return TTokenTypes.RPAREN;
          }
        case 69: break;
        case 32: 
          { return TTokenTypes.L_ENDFOR;
          }
        case 70: break;
        case 44: 
          { return TTokenTypes.C_ELSEIFNOT;
          }
        case 71: break;
        case 25: 
          { return TTokenTypes.QRPAREN;
          }
        case 72: break;
        case 16: 
          { saveState(yystate());
    yybegin(IN_SHORT_STATEMENT);
    return TTokenTypes.DSHARP;
          }
        case 73: break;
        case 24: 
          { return TTokenTypes.QLPAREN;
          }
        case 74: break;
        case 18: 
          { yybegin(previousState);
    return TTokenTypes.DSHARP;
          }
        case 75: break;
        case 7: 
          { return TTokenTypes.WHITESPACE;
          }
        case 76: break;
        case 15: 
          { return TTokenTypes.OP_COMMA;
          }
        case 77: break;
        case 28: 
          { return TTokenTypes.C_ENDIF;
          }
        case 78: break;
        case 30: 
          { yybegin(IN_STATEMENT);
    return TTokenTypes.STATEMENT_OPENING_TAG;
          }
        case 79: break;
        case 39: 
          { return TTokenTypes.C_ENDIFDEF;
          }
        case 80: break;
        case 21: 
          { return TTokenTypes.OP_OR;
          }
        case 81: break;
        case 8: 
          { return TTokenTypes.NUMBER;
          }
        case 82: break;
        case 37: 
          { return TTokenTypes.C_ELSEIF;
          }
        case 83: break;
        case 33: 
          { return TTokenTypes.C_IFNOT;
          }
        case 84: break;
        case 11: 
          { return TTokenTypes.OP_ASSIGN;
          }
        case 85: break;
        case 22: 
          { saveState(yystate()); yybegin(IN_NESTED_FUNCTION_CALL); return TTokenTypes.DSHARP;
          }
        case 86: break;
        case 27: 
          { return TTokenTypes.L_FOR;
          }
        case 87: break;
        case 31: 
          { return TTokenTypes.C_ELSE;
          }
        case 88: break;
        case 40: 
          { return TTokenTypes.ARRAY_FIELD;
          }
        case 89: break;
        case 1: 
          { return TTokenTypes.HTML;
          }
        case 90: break;
        case 4: 
          { return TTokenTypes.VAR_NAME;
          }
        case 91: break;
        case 29: 
          { yypushback(2); return TTokenTypes.NESTED_FUNC_NAME;
          }
        case 92: break;
        case 36: 
          { return TTokenTypes.VAR_VALUE;
          }
        case 93: break;
        case 23: 
          { yybegin(previousState); return TTokenTypes.DSHARP;
          }
        case 94: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
